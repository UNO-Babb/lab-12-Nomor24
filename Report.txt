Name:

Number of elements: 10000

Bubble Sort
Sorted: 2.43926 seconds
Reversed:5.69453 seconds
Random:4.67097 seconds

Bubble Sort Early Exit
Sorted: 0.00086 seconds
Reversed:6.06982 seconds
Random: 4.63793 seconds

Selection Sort
Sorted: 1.88270 seconds
Reversed: 1.94888 seconds
Random: 1.97898 seconds

Insertion Sort
Sorted: 0.00155 seconds
Reversed: 4.32595 seconds
Random: 2.27139 seconds

Merge Sort
Sorted:0.02461 seconds
Reversed: 0.01625 seconds
Random: 0.02196 seconds

Questions to answer:
1) What was the worst case scenario for any sorting technique?
The worst case for any scenario was Bubble Sort early exit on a reversed list with a time of 6.06982 seconds.

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?
The reason the times were different is because of the actual way each sort looks through the data.
Selection Sort always examines every element once, so it had almost the same times regardless of whether the data was sorted, reversed, or random.
Bubble Sort does a lot of unnecessary swaps and it keeps comparing and swapping elements even when parts are already sorted even 
Bubble Sort Early Exit can detect when no swaps occur in a pass and stop early. 
Bubble sort Early Exit is the best option in a already sorted list as it gets done almost instantly. 
While selection Sort would be best and most efficient with a variety of different types as it is the most consistent.

3) Why was merge sort so much more efficient?

Because it performs much fewer operations by splitting it into manageable chunks. 
For this specific example it would only do about 100,000 operations while O(nÂ²) ones would perform around 100,000,000. 
This makes it the most efficient and consistently lowest time of all the other techniques on here.

4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?

TimSort works well because it uses merge sort for big groups of data and insertion sort for small groups (under 10 items).
This works because insertion sort is actually faster than merge sort when working with only a few items. 

5) What issues can you see with a recursive sorting technique like merge sort?
The main one I can see is it would be more expensive. 
Even though it is faster time wise it would take up more temporary storage and memory than other methods. 
This could be a big problem if it is working on a smaller device or if it is going through a really big set of data.